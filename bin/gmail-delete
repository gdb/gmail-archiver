#!/usr/bin/env ruby
require 'fileutils'
require 'net/imap'
require 'optparse'
require 'time'

require File.expand_path(File.join(File.dirname(__FILE__), '../lib/gmail-archiver'))
require 'json'

module GmailArchiver
  class GmailDeleteRunner < AbstractRunner
    LABEL_WHITELIST = ['To', 'Sent'] # Should really be To Me, but spaces in labels are messed up
    include StripeContext::Log::Loggable
    include GmailArchiver::IMAP

    def initialize(username, password, delete_until)
      @username = username
      @password = password
      @delete_until = delete_until
    end

    def slice_size
      1000
    end

    def db_file
      path('gmail-delete.db')
    end

    def max_id
      @db['max_id'] || 0
    end

    def update_max_id(uid)
      assert(uid >= max_id, "Uid is #{uid} but max_id is #{max_id}")
      @db['max_id'] = [max_id, uid].max
    end

    def next_slice(start, stop)
      slice = (start..stop).select do |i|
        ok = true

        meta = load_meta(i)
        next unless meta
        LABEL_WHITELIST.each do |label|
          if meta["X-GM-LABELS"].include?(label)
            log_ann("Skipping #{i} because it is labeled #{label}: (#{meta["X-GM-LABELS"].inspect})")
            ok = false
            break
          end
        end

        ok
      end
      slice
    end

    def load_meta(i)
      folder = i / 1000
      base = "messages/#{folder}/#{i}"
      meta_file = path("#{base}.meta")
      eml_file = path("#{base}.eml")
      if File.exists?(meta_file)
        JSON.load(File.read(meta_file))
      else
        raise "Missing meta file" if File.exists?(eml_file)
        nil
      end
    end

    def delete_next_slice
      start = max_id + 1
      stop = max_id + slice_size
      slice = next_slice(start, stop)
      skipped = (start..stop).to_a - slice

      log_ann("Deleting messages from #{start}-#{stop} except #{skipped.inspect}")
      result = @imap.uid_copy(slice, '[Gmail]/Trash')

      update_max_id(stop)
      result
    end

    def find_max(dir)
      messages = Dir.entries(File.join(dir))
      messages.select {|file| file != '.' && file != '..'}.map do |a|
        a =~ /^(\d+?)(\.[a-z]+)?$/
        Integer($1)
      end.max
    end

    def max_known
      @max_known ||=
        begin
          messages_dir = path('messages')
          max_dir_number = find_max(messages_dir)
          max_known = find_max(File.join(messages_dir, max_dir_number.to_s))
          log_ann("Maximum known UID is #{max_known}")
          max_known
        end
    end

    def delete_until
      @delete_until ||= max_known / 2
    end

    def do_run
      log_ann("Starting to delete slices past #{max_id} up to #{delete_until} (have downloaded until #{max_known})")
      # @storer = start_storer
      begin
        login
        select

        while true
          benchmark(delete_until) do
            delete_next_slice
            [slice_size, slice_size]
          end
          checkpoint_db
        end
      rescue EOFError, IOError, Net::IMAP::ByeResponseError, Net::IMAP::NoResponseError => e # imap lib dying
        log_error("Error; about to sleep and retry", e)
        sleep(10)
        retry
      end

      checkpoint_db
    end
  end
end

def main
  options = {}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      $log.level -= 1
    end

    opts.on('-c', '--cache', 'Enable caching of credentials in /tmp') do
      options[:cache] = true
    end

    opts.on('-d ID', '--delete-until ID', 'UID of the maximum message to delete to') do |id|
      options[:delete_until] = id
    end

    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end
  end
  optparse.parse!

  if ARGV.length != 0
    puts optparse
    return 1
  end

  username, password = GmailArchiver.get_login_info(options[:cache])
  runner = GmailArchiver::GmailDeleteRunner.new(username, password, options[:delete_until])
  runner.run
  return 0
end

if $0 == __FILE__
  ret = main
  begin
    exit(ret)
  rescue TypeError
    exit(0)
  end
end
