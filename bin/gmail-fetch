#!/usr/bin/env ruby
require 'fileutils'
require 'net/imap'
require 'optparse'
require 'time'

require 'rubygems'
require 'highline/import'
require 'json'

require File.expand_path(File.join(File.dirname(__FILE__), '../lib/gmail-archiver'))

module GmailArchiver
  class OutOfMessages < StandardError; end

  class GmailFetchRunner < AbstractRunner
    include GmailArchiver::IMAP

    def initialize(username, password)
      @username = username
      @password = password
    end

    def db_file
      path('gmail-fetch.db')
    end

    def max_id
      @db['max_id'] ||= find_min_known
    end

    def update_max_id(uid)
      assert(uid >= max_id, "Uid is #{uid} but max_id is #{max_id}")
      @db['max_id'] = [max_id, uid].max
    end

    def store_message(uid, raw, meta)
      safe = uid

      folder = path("messages/#{uid / 1000}")
      file = uid.to_s
      assert(!file.include?('/'), "Filename includes a /: #{file}", true)
      location = File.join(folder, file)

      $log.debug("Dumping #{uid} to #{location}")
      FileUtils.mkdir_p(folder)
      File.open(location + '.eml', 'w') do |f|
        f.write(raw)
      end
      File.open(location + '.meta', 'w') do |f|
        f.write(JSON.pretty_generate(meta) + "\n")
      end
    end

    def fetch_next_slice
      last = max_id + slice_size
      slice = (max_id+1..last)

      $log.info("Fetching messages #{slice}")
      unless result = @imap.uid_fetch(slice, ['RFC822', 'UID', 'X-GM-THRID', 'X-GM-LABELS', 'X-GM-MSGID'])
        if last < @max_known
          $log.warn("Empty slice found (slice ending at #{last}, max_known is #{@max_known.inspect})")
          result = []
        else
          $log.info("No messages found (slice ending at #{last}, max_known is #{@max_known.inspect})")
          raise OutOfMessages # might happen with an empty slice that isn't at the end; be careful
        end
      end

      update_max_id(last)
      result
    end

    def store_next_slice(result)
      $log.info("Storing #{result.length} messages")
      result.each do |message|
        data = message.attr
        uid = data['UID']
        contents = data.delete('RFC822')
        store_message(uid, contents, data)
      end
    end

    def find_min_known
      least_recent = @imap.fetch(1, 'UID')
      min_known = least_recent[0].attr['UID']
      $log.info("Minimum known UID is #{min_known}; starting from one before")
      min_known - 1
    end

    def find_max_known
      most_recent = @imap.uid_fetch(-1, 'UID')
      @max_known = most_recent[0].attr['UID']
      $log.info("Maximum known UID is #{@max_known}")
    end

    def do_run
      # @storer = start_storer
      begin
        login
        select

        $log.info("Starting fetch of all slices past #{max_id}")
        find_max_known

        while true
          benchmark(@max_known) do
            result = fetch_next_slice
            store_next_slice(result)
            [result.length, slice_size]
          end
          checkpoint_db
        end
      rescue OutOfMessages
      rescue EOFError, IOError, Net::IMAP::ByeResponseError => e # imap lib dying
        $log.error("Error; about to sleep and retry", e)
        sleep(10)
        retry
      end

      checkpoint_db
    end
  end
end

def main
  options = {}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      $log.level -= 1
    end

    opts.on('-c', '--cache', 'Enable caching of credentials in /tmp') do
      options[:cache] = true
    end

    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end
  end
  optparse.parse!

  if ARGV.length != 0
    puts optparse
    return 1
  end

  username, password = GmailArchiver.get_login_info(options[:cache])
  runner = GmailArchiver::GmailFetchRunner.new(username, password)
  runner.run
  return 0
end

if $0 == __FILE__
  ret = main
  begin
    exit(ret)
  rescue TypeError
    exit(0)
  end
end
